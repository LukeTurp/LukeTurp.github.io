{"version":3,"sources":["components/exampleApp/index.js","App.js","reportWebVitals.js","index.js"],"names":["hardCodedPaymentRequestObj","currencyCode","countryCode","supportedNetworks","merchantCapabilities","total","label","amount","type","shippingType","shippingMethods","detail","identifier","requiredShippingContactFields","requiredBillingContactFields","shippingContact","phoneNumber","emailAddress","givenName","familyName","addressLines","locality","administrativeArea","postalCode","country","billingContact","subLocality","ExampleApp","useState","prInterface","setPrInterface","createTecPrInterface","useTecPaymentsRequest","useEffect","tecPrInterface","console","log","canMakePayments","then","availablePrMethods","applePay","listenFor","tokenResp","a","completePayment","cancelEvent","shippingMethodUpdateEvent","shippingMethod","completeShippingMethodSelection","notFreeUpdate","newTotal","freeUpdate","outOfUsShipping","shippingMethodUpdateObj","paymentMethodEvent","paymentMethod","completePaymentMethodSelection","shippingContactEvent","completeShippingContactSelection","hardCodedShippingContactUpdateObj","newShippingMethods","errObj","errors","topic","message","style","height","paymentRequestInterface","teConnectInstance","createTEConnect","enableTecPR","App","teConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc610064.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { \r\n    //CardEntry, useTeConnect, \r\n    TecPaymentRequestButtons,\r\n    useTecPaymentsRequest  } from '@magensa/te-connect-react';\r\n\r\n\r\n// const customStyles = {\r\n//     base: {\r\n//         wrapper: { \r\n//             margin: 0, \r\n//             padding: 0\r\n//         },\r\n//         variants: {\r\n//             inputType: 'outlined',\r\n//             inputMargin: 'dense',\r\n//             autoMinHeight: true\r\n//         },\r\n//        backgroundColor: \"#424242\"\r\n//     },\r\n//     boxes: {\r\n//         labelColor: \"#BB86FC\",\r\n//         textColor: \"#BB86FC\",\r\n//         borderRadius: 10,\r\n//         errorColor: \"#CF6679\",\r\n//         inputColor: '#121212'\r\n//     }\r\n// }\r\n\r\n\r\nconst hardCodedPaymentRequestObj = {\r\n    currencyCode: \"USD\",\r\n    countryCode: \"US\",\r\n    supportedNetworks: ['visa', 'masterCard', 'amex', 'discover', 'jcb'],\r\n    merchantCapabilities: ['supports3DS'],\r\n    total: {\r\n        label: \"Test Transaction\",\r\n        amount: \"1.00\",\r\n        type: \"final\"\r\n    },\r\n    shippingType: ['shipping'],\r\n    shippingMethods: [\r\n        {    \r\n            label: 'Free Shipping',\r\n            detail: \"Arrives in a week\",\r\n            amount: '0.00',\r\n            identifier: \"FreeShipping\"\r\n        },\r\n        {    \r\n            label: 'Not Free Shipping',\r\n            detail: \"Arrives in less than week\",\r\n            amount: '0.11',\r\n            identifier: \"ChargeShipping\"\r\n        }\r\n    ],\r\n    requiredShippingContactFields: [\r\n        'name',\r\n        'email',\r\n        'phone',\r\n        'postalAddress'\r\n    ],\r\n    requiredBillingContactFields: [\r\n        'name',\r\n        'email',\r\n        'phone'\r\n    ],\r\n    shippingContact: {\r\n        phoneNumber: '888-8888',\r\n        emailAddress: 'something@example.ne',\r\n        givenName: 'Bob',\r\n        familyName: 'Kahuna',\r\n        addressLines: ['123 Main St.', 'Suite 101'],\r\n        locality: 'Los Angeles',\r\n        administrativeArea: 'CA',\r\n        postalCode: '90010',\r\n        country: 'United States',\r\n        countryCode: 'US',\r\n    },\r\n    billingContact: {\r\n        emailAddress: 'something@example.ne',\r\n        givenName: 'Bob',\r\n        familyName: 'Kahuna',\r\n        addressLines: ['123 Main St.', 'Suite 101'],\r\n        subLocality: 'Los Angeles',\r\n        locality: 'CA',\r\n        postalCode: '90010',\r\n        country: 'United States',\r\n        countryCode: 'US',\r\n    }\r\n};\r\n\r\nconst ExampleApp = () => {\r\n    const [ prInterface, setPrInterface ] = useState(() => false);\r\n    const createTecPrInterface = useTecPaymentsRequest();\r\n\r\n    useEffect(() => {\r\n        if (createTecPrInterface) {\r\n            const tecPrInterface = createTecPrInterface(hardCodedPaymentRequestObj);\r\n            console.log('real interface', tecPrInterface);\r\n\r\n            tecPrInterface.canMakePayments().then( availablePrMethods => {\r\n                console.log('canMakePayments Result: ', availablePrMethods);\r\n\r\n                if (availablePrMethods.applePay)\r\n                    setPrInterface(tecPrInterface);\r\n            });\r\n\r\n            tecPrInterface.listenFor('confirm-token', async (tokenResp) => {\r\n                console.log('[CUSTOMER TEC COMPLETE EVENT]: ');\r\n                console.log(tokenResp);\r\n                console.log('typeof func');\r\n                console.log(typeof(tokenResp.completePayment));\r\n\r\n                tokenResp.completePayment('success');\r\n            });\r\n\r\n            tecPrInterface.listenFor('cancel-transaction', async (cancelEvent) => {\r\n                console.log('[CUSTOMER TEC CANCEL EVENT]: ');\r\n                console.log(cancelEvent);\r\n            });\r\n\r\n            tecPrInterface.listenFor('shipping-method-update', async (shippingMethodUpdateEvent) => {\r\n                console.log('[CUSTOMER TEC SHIPPING UPDATE EVENT]: ');\r\n                console.log(shippingMethodUpdateEvent);\r\n\r\n                const { shippingMethod, completeShippingMethodSelection } = shippingMethodUpdateEvent;\r\n\r\n                const notFreeUpdate = {\r\n                    newTotal: {\r\n                        label: \"Test Trx with Not Free Shipping\",\r\n                        amount: \"1.11\",\r\n                        type: \"final\"\r\n                    }\r\n                }\r\n\r\n                const freeUpdate = {\r\n                    newTotal: {\r\n                        label: \"Test Trx w/ Free Shipping\",\r\n                        amount: \"1.00\",\r\n                        type: \"final\"\r\n                    }\r\n                }\r\n\r\n                const outOfUsShipping = {\r\n                    newTotal: {\r\n                        label: \"Test Trx w/ Out of Scope Shipping\",\r\n                        amount: \"1.23\",\r\n                        type: \"final\"\r\n                    }\r\n                }\r\n\r\n                let shippingMethodUpdateObj;\r\n                switch (shippingMethod.identifier) {\r\n                    case \"OutOfCountryShip\":\r\n                        shippingMethodUpdateObj = outOfUsShipping;\r\n                        break;\r\n                    case 'ChargeShipping':\r\n                        shippingMethodUpdateObj = notFreeUpdate;\r\n                        break;\r\n                    default:\r\n                        shippingMethodUpdateObj = freeUpdate;\r\n\r\n                }\r\n\r\n                completeShippingMethodSelection(shippingMethodUpdateObj);\r\n            });\r\n\r\n            tecPrInterface.listenFor('payment-method-selection', async (paymentMethodEvent) => {\r\n                console.log('[CUSTOMER TEC PAYMENT METHOD EVENT]:');\r\n\r\n                const { paymentMethod, completePaymentMethodSelection } = paymentMethodEvent;\r\n\r\n                console.log('paymentMethod: ', paymentMethodEvent);\r\n\r\n                const hardCodedPaymentUpdateObj = {\r\n                    newTotal: {\r\n                        label: \"Test Trx with payment method\",\r\n                        amount: \"1.01\",\r\n                        type: \"final\"\r\n                    }\r\n                }\r\n\r\n                completePaymentMethodSelection(hardCodedPaymentUpdateObj);\r\n            });\r\n\r\n            tecPrInterface.listenFor('shipping-contact-update', async (shippingContactEvent) => {\r\n                console.log('[CUSTOMER SHIPPING CONTACT EVENT]:');\r\n                console.log('shippingContactEvent: ', shippingContactEvent);\r\n\r\n                const { shippingContact, completeShippingContactSelection } = shippingContactEvent;\r\n\r\n                const hardCodedShippingContactUpdateObj = {\r\n                    newTotal: {\r\n                        label: \"Test Trx positive shippingContact\",\r\n                        amount: \"1.02\",\r\n                        type: \"final\"\r\n                    },\r\n                    newShippingMethods: [\r\n                        {    \r\n                            label: 'Outside US Shipping',\r\n                            detail: \"Arrives in 7-12 weeks\",\r\n                            amount: '100.00',\r\n                            identifier: \"OutOfCountryShip\"\r\n                        },\r\n                        {    \r\n                            label: 'Not Free Shipping',\r\n                            detail: \"Arrives in less than week\",\r\n                            amount: '0.11',\r\n                            identifier: \"ChargeShipping\"\r\n                        }\r\n                    ]\r\n                }\r\n\r\n                const errObj = {\r\n                    newTotal: {\r\n                        label: \"Test Trx negative shippingContact\",\r\n                        amount: \"1.03\",\r\n                        type: \"final\"\r\n                    },\r\n                    errors: [\r\n                        {\r\n                            topic: \"failure\",\r\n                            message: \"Generic Error Message for an unkown error\"\r\n                        }\r\n                    ]\r\n                }\r\n\r\n                console.log(`[${shippingContact.countryCode}]`);\r\n\r\n                completeShippingContactSelection(\r\n                    (shippingContact.countryCode === \"US\") ? hardCodedShippingContactUpdateObj : errObj\r\n                );\r\n            });\r\n        }\r\n            \r\n\r\n        console.log('useTecPaymentsRequest hook:', createTecPrInterface);\r\n    }, [createTecPrInterface]);\r\n    // const { createPayment, getCurrentElements } = useTeConnect();\r\n\r\n    // const clickHandler = async(e) => {\r\n    //     try {\r\n    //         const elements = getCurrentElements();\r\n    //         const teConnectResponse = await createPayment(elements);\r\n    //         console.log('result:', teConnectResponse);\r\n    //     }\r\n    //     catch(err) {\r\n    //         console.error(err);\r\n    //     }\r\n    // }\r\n    \r\n    return (\r\n        <div style={{ height: '100%' }}>\r\n            <h1>TEC Demo</h1>\r\n            {/* <CardEntry stylesConfig={ customStyles } /> */}\r\n            { prInterface && <TecPaymentRequestButtons paymentRequestInterface={ prInterface } /> }\r\n            \r\n            {/* <button onClick={ clickHandler }>Create Token</button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExampleApp;\r\n","import React from 'react';\nimport { TEConnect } from '@magensa/te-connect-react';\nimport { createTEConnect } from '@magensa/te-connect';\n\nimport ExampleApp from './components/exampleApp';\n\n\nconst teConnectInstance = createTEConnect(\"Y2xpZW50VG9rZW5Qb2NDb2RlL2NsaWVudFRva2VuUG9jVXNlcjpQYXNzd29yZDEh\", { enableTecPR: true });\n\nconst App = () => (\n    <TEConnect teConnect={ teConnectInstance }>\n        <ExampleApp />\n    </TEConnect>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}