{"version":3,"sources":["consts/index.js","components/exampleApp/index.js","App.js","reportWebVitals.js","index.js"],"names":["calculateNewTransactionInfo","shippingOptionId","newTransactionInfo","displayItems","label","type","price","countryCode","currencyCode","totalPriceStatus","totalPrice","totalPriceLabel","shippingCost","push","status","forEach","displayItem","parseFloat","toString","extendedOptionsObject","apiVersion","apiVersionMinor","allowedCardNetworks","merchantName","gatewayId","transactionInfo","callbackIntents","emailRequired","shippingAddressRequired","shippingOptionRequired","shippingAddressParameters","allowedCountryCodes","phoneNumberRequired","shippingOptionParameters","defaultSelectedOptionId","shippingOptions","paymentDataCallbacks","onPaymentAuthorized","paymentData","Promise","resolve","reject","setTimeout","console","log","paymentMethodData","tokenizationData","token","processPayment","then","transactionState","catch","error","intent","message","reason","onPaymentDataChanged","intermediatePaymentData","shippingAddress","shippingOptionData","paymentDataRequestUpdate","callbackTrigger","administrativeArea","newShippingOptionParameters","selectedShippingOptionId","id","allowedPaymentMethods","parameters","allowedAuthMethods","environment","customStyles","base","wrapper","margin","padding","variants","inputType","inputMargin","autoMinHeight","backgroundColor","boxes","labelColor","textColor","borderRadius","errorColor","inputColor","hardCodedPaymentRequestObj","storeDisplayName","supportedNetworks","merchantCapabilities","total","amount","shippingType","shippingMethods","detail","identifier","requiredShippingContactFields","requiredBillingContactFields","shippingContact","phoneNumber","emailAddress","givenName","familyName","addressLines","locality","postalCode","country","billingContact","subLocality","ExampleApp","useState","prInterface","setPrInterface","tecResult","setTecResult","useTeConnect","createPayment","getCurrentElements","createTecPrInterface","useTecPaymentsRequest","useEffect","tecPrInterface","applePay","googlePay","canMakePayments","availablePrMethods","listenFor","tokenResp","a","JsonResp","JSON","stringify","tokenDetails","completePayment","cancelEvent","shippingMethodUpdateEvent","shippingMethod","completeShippingMethodSelection","notFreeUpdate","newTotal","freeUpdate","outOfUsShipping","shippingMethodUpdateObj","paymentMethodEvent","paymentMethod","completePaymentMethodSelection","shippingContactEvent","completeShippingContactSelection","hardCodedShippingContactUpdateObj","newShippingMethods","errObj","errors","errorType","clickHandler","e","elements","teConnectResponse","style","height","stylesConfig","paymentRequestInterface","onClick","minWidth","overflowWrap","whiteSpace","teConnectInstance","createTEConnect","tecPaymentRequest","appleMerchantId","googleMerchantId","App","teConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f902f33c.chunk.js","sourcesContent":["function getGoogleTransactionInfo() {\r\n\treturn {\r\n\t\t  displayItems: [\r\n\t\t  {\r\n\t\t\tlabel: \"Subtotal\",\r\n\t\t\ttype: \"SUBTOTAL\",\r\n\t\t\tprice: \"11.00\",\r\n\t\t  },\r\n\t\t{\r\n\t\t\tlabel: \"Tax\",\r\n\t\t\ttype: \"TAX\",\r\n\t\t\tprice: \"1.00\",\r\n\t\t  }\r\n\t  ],\r\n\t  countryCode: 'US',\r\n\t  currencyCode: \"USD\",\r\n\t  totalPriceStatus: \"FINAL\",\r\n\t  totalPrice: \"12.00\",\r\n\t  totalPriceLabel: \"Total\"\r\n\t};\r\n  }\r\n\r\n\r\nfunction processPayment(paymentData) {\r\n\treturn new Promise(function(resolve, reject) {\r\n\tsetTimeout(function() {\r\n\t// show returned data in developer console for debugging\r\n\t console.log(paymentData);\r\n\t\t\t// @todo pass payment token to your gateway to process payment\r\n\t\t\tconsole.log(paymentData.paymentMethodData.tokenizationData.token);\r\n\r\n\tresolve({});\r\n}, 3000);\r\n});\r\n}\r\n\r\nfunction getGoogleUnserviceableAddressError() {\r\n\treturn {\r\nreason: \"SHIPPING_ADDRESS_UNSERVICEABLE\",\r\nmessage: \"Cannot ship to the selected address\",\r\nintent: \"SHIPPING_ADDRESS\"\r\n\t};\r\n}\r\n\r\nfunction getGoogleDefaultShippingOptions() {\r\n\treturn {\r\n  defaultSelectedOptionId: \"shipping-001\",\r\n  shippingOptions: [\r\n\t{\r\n\t  \"id\": \"shipping-001\",\r\n\t  \"label\": \"Free: Standard shipping\",\r\n\t  \"description\": \"Free Shipping delivered in 5 business days.\"\r\n\t},\r\n\t{\r\n\t  \"id\": \"shipping-002\",\r\n\t  \"label\": \"$1.99: Standard shipping\",\r\n\t  \"description\": \"Standard shipping delivered in 3 business days.\"\r\n\t},\r\n\t{\r\n\t  \"id\": \"shipping-003\",\r\n\t  \"label\": \"$10: Express shipping\",\r\n\t  \"description\": \"Express shipping delivered in 1 business day.\"\r\n\t},\r\n  ]\r\n};\r\n}\r\n\r\n// const validPromoCodes = {\r\n// \tSOMEPROMOCODE: {\r\n// \t  code: 'SOMEPROMOCODE',\r\n// \t  description: '20% off all products!',\r\n// \t  function: percentageDiscount,\r\n// \t  value: -20 // value should be negative for a discount\r\n// \t},\r\n// \tANOTHERPROMOCODE: {\r\n// \t  code: 'ANOTHERPROMOCODE',\r\n// \t  description: '$5 dollars off!',\r\n// \t  function: staticDiscount,\r\n// \t  value: -5.00 // value should be negative for a discount\r\n// \t}\r\n//   }\r\n\r\nfunction getShippingCosts() {\r\n\treturn {\r\n\"shipping-001\": \"0.00\",\r\n\"shipping-002\": \"1.99\",\r\n\"shipping-003\": \"10.00\"\r\n}\r\n}\r\n\r\nfunction calculateNewTransactionInfo(shippingOptionId) {\r\n\tlet newTransactionInfo = getGoogleTransactionInfo();\r\n\r\nlet shippingCost = getShippingCosts()[shippingOptionId];\r\nnewTransactionInfo.displayItems.push({\r\ntype: \"LINE_ITEM\",\r\nlabel: \"Shipping cost\",\r\nprice: shippingCost,\r\nstatus: \"FINAL\"\r\n});\r\n\r\nlet totalPrice = 0.00;\r\nnewTransactionInfo.displayItems.forEach(displayItem => totalPrice += parseFloat(displayItem.price));\r\nnewTransactionInfo.totalPrice = totalPrice.toString();\r\n\r\nreturn newTransactionInfo;\r\n}\r\n\r\nfunction onPaymentDataChanged(intermediatePaymentData) {\r\n\treturn new Promise(function(resolve, reject) {\r\n\t\tlet shippingAddress = intermediatePaymentData.shippingAddress;\r\n\t\tlet shippingOptionData = intermediatePaymentData.shippingOptionData;\r\n\t\tlet paymentDataRequestUpdate = {};\r\n\r\n\t\tif (intermediatePaymentData.callbackTrigger == \"INITIALIZE\" || intermediatePaymentData.callbackTrigger == \"SHIPPING_ADDRESS\") {\r\n\t\t\tif(shippingAddress.administrativeArea == \"NJ\")  {\r\n\t\t\t\tpaymentDataRequestUpdate.error = getGoogleUnserviceableAddressError();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpaymentDataRequestUpdate.newShippingOptionParameters = getGoogleDefaultShippingOptions();\r\n\t\t\t\tlet selectedShippingOptionId = paymentDataRequestUpdate.newShippingOptionParameters.defaultSelectedOptionId;\r\n\t\t\t\tpaymentDataRequestUpdate.newTransactionInfo = calculateNewTransactionInfo(selectedShippingOptionId);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (intermediatePaymentData.callbackTrigger == \"SHIPPING_OPTION\") {\r\n\t\tpaymentDataRequestUpdate.newTransactionInfo = calculateNewTransactionInfo(shippingOptionData.id);\r\n\t\t}\r\n\r\n\t\tresolve(paymentDataRequestUpdate);\r\n\t});\r\n  }\r\n\r\n  /* TODO: combine the onPaymentDataChanged for example?\r\nfunction onPaymentDataChanged(intermediatePaymentData) {\r\n  return new Promise(function(resolve, reject) {\r\n\r\n    let redemptionCodes = new Set();\r\n    let shippingOptionData = intermediatePaymentData.shippingOptionData;\r\n    let paymentDataRequestUpdate = {};\r\n    paymentDataRequestUpdate.newTransactionInfo = getGoogleTransactionInfo();\r\n\r\n    // ensure that promo codes set is unique\r\n    if(typeof intermediatePaymentData.offerData != 'undefined') {\r\n      redemptionCodes = new Set(intermediatePaymentData.offerData.redemptionCodes);\r\n    }\r\n\r\n    // validate promo codes and add descriptions to payment sheet\r\n    if (intermediatePaymentData.callbackTrigger === 'OFFER') {\r\n      paymentDataRequestUpdate.newOfferInfo = {};\r\n      paymentDataRequestUpdate.newOfferInfo.offers = [];\r\n      for (redemptionCode of redemptionCodes) {\r\n        if (validPromoCodes[redemptionCode]) {\r\n          paymentDataRequestUpdate = validPromoCodes[redemptionCode].function(\r\n            validPromoCodes[redemptionCode],\r\n            paymentDataRequestUpdate\r\n          );\r\n        } else {\r\n          paymentDataRequestUpdate.error = getGoogleOfferInvalidError(redemptionCode);\r\n        }\r\n      }\r\n    }\r\n\r\n     * Update item costs and total.\r\n     *\r\n     * In production, this final calculation should always be calculated\r\n     * server-side to ensure it matches the price that the merchant sends to the\r\n     * processor.\r\n\r\n\t paymentDataRequestUpdate.newTransactionInfo = calculateNewTransactionInfo(\r\n\t\tpaymentDataRequestUpdate.newTransactionInfo\r\n\t  )\r\n  \r\n\t  resolve(paymentDataRequestUpdate);\r\n\t});\r\n  }\r\n\r\n  */\r\n\r\n  function onPaymentAuthorized(paymentData) {\r\n\treturn new Promise(function(resolve, reject){\r\n\r\n// handle the response\r\nprocessPayment(paymentData)\r\n.then(function() {\r\n  resolve({transactionState: 'SUCCESS'});\r\n})\r\n.catch(function() {\r\n\tresolve({\r\n\ttransactionState: 'ERROR',\r\n\terror: {\r\n\t  intent: 'PAYMENT_AUTHORIZATION',\r\n\t  message: 'Insufficient funds',\r\n\t  reason: 'PAYMENT_DATA_INVALID'\r\n\t}\r\n  });\r\n});\r\n\r\n});\r\n}\r\n\r\n\r\n//===================================\r\n\r\nexport const extendedOptionsObject = {\r\n\tapiVersion: 2,\r\n\tapiVersionMinor: 0,\r\n\tallowedCardNetworks: [\"AMEX\", \"DISCOVER\", \"JCB\", \"MASTERCARD\", \"MIR\", \"VISA\"],\r\n\tmerchantName: \"TEConnect Test\",\r\n\tgatewayId: \"GP21481460\",\r\n\ttransactionInfo: {\r\n        displayItems: [{\r\n\t\t\tlabel: \"Subtotal\",\r\n\t\t\ttype: \"SUBTOTAL\",\r\n\t\t\tprice: \"11.00\",\r\n        },\r\n      \t{\r\n\t\t\tlabel: \"Tax\",\r\n\t\t\ttype: \"TAX\",\r\n\t\t\tprice: \"1.00\",\r\n\t\t}],\t\r\n\t\tcountryCode: 'US',\r\n\t\tcurrencyCode: \"USD\",\r\n\t\ttotalPriceStatus: \"FINAL\",\r\n\t\ttotalPrice: \"12.00\",\r\n\t\ttotalPriceLabel: \"Total\"\r\n  \t},\r\n\tcallbackIntents: [\"SHIPPING_ADDRESS\",  \"SHIPPING_OPTION\", \"PAYMENT_AUTHORIZATION\"],\r\n\t//offerInfo: {}, //TODO:\r\n\temailRequired: true,\r\n\tshippingAddressRequired: true,\r\n\tshippingOptionRequired: true,\r\n\tshippingAddressParameters: {\r\n\t\tallowedCountryCodes: ['US'],\r\n\t\tphoneNumberRequired: true\r\n\t},\r\n\tshippingOptionParameters: {\r\n\t\tdefaultSelectedOptionId: \"shipping-001\",\r\n\t\tshippingOptions: [\r\n\t\t  {\r\n\t\t\t\"id\": \"shipping-001\",\r\n\t\t\t\"label\": \"$0.00: Free shipping\",\r\n\t\t\t\"description\": \"Free Shipping delivered in 5 business days.\"\r\n\t\t  },\r\n\t\t  {\r\n\t\t\t\"id\": \"shipping-002\",\r\n\t\t\t\"label\": \"$1.99: Standard shipping\",\r\n\t\t\t\"description\": \"Standard shipping delivered in 3 business days.\"\r\n\t\t  },\r\n\t\t  {\r\n\t\t\t\"id\": \"shipping-003\",\r\n\t\t\t\"label\": \"$1000: Express shipping\",\r\n\t\t\t\"description\": \"Express shipping delivered in 1 business day.\"\r\n\t\t  }\r\n\t\t]\r\n\t  },\r\n\tpaymentDataCallbacks: {\r\n\t\tonPaymentAuthorized: onPaymentAuthorized,\r\n\t\tonPaymentDataChanged: onPaymentDataChanged\r\n\t},\r\n\t//existingPaymentMethodRequired: true,\r\n\tallowedPaymentMethods: {\r\n\t\ttype: 'CARD',\r\n\t\tparameters: {\r\n            allowedAuthMethods: [\"PAN_ONLY\", \"CRYPTOGRAM_3DS\"],\r\n            allowedCardNetworks: [\"AMEX\", \"DISCOVER\", \"JCB\", \"MASTERCARD\", \"VISA\"]\r\n\t\t}\r\n\t},\r\n\tenvironment: \"TEST\",  //optional\r\n};","import React, { useEffect, useState } from 'react';\r\nimport { \r\n    TecPaymentRequestButtons,\r\n    useTecPaymentsRequest,\r\n    useTeConnect,\r\n    CardEntry\r\n} from '@magensa/te-connect-react';\r\nimport { extendedOptionsObject } from '../../consts';\r\n\r\n\r\nconst customStyles = {\r\n    base: {\r\n        wrapper: { \r\n            margin: 0, \r\n            padding: 0\r\n        },\r\n        variants: {\r\n            inputType: 'outlined',\r\n            inputMargin: 'dense',\r\n            autoMinHeight: true\r\n        },\r\n       backgroundColor: \"#424242\"\r\n    },\r\n    boxes: {\r\n        labelColor: \"#BB86FC\",\r\n        textColor: \"#BB86FC\",\r\n        borderRadius: 10,\r\n        errorColor: \"#CF6679\",\r\n        inputColor: '#121212'\r\n    }\r\n}\r\n\r\n\r\nconst hardCodedPaymentRequestObj = {\r\n    storeDisplayName: \"TEConnect Dev Store\",\r\n    currencyCode: \"USD\",\r\n    countryCode: \"US\",\r\n    supportedNetworks: ['visa', 'masterCard', 'amex', 'discover', 'jcb'],\r\n    merchantCapabilities: ['supports3DS'],\r\n    total: {\r\n        label: \"Test Transaction\",\r\n        amount: \"1.00\",\r\n        type: \"final\"\r\n    },\r\n    shippingType: ['shipping'],\r\n    shippingMethods: [\r\n        {    \r\n            label: 'Free Shipping',\r\n            detail: \"Arrives in a week\",\r\n            amount: '0.00',\r\n            identifier: \"FreeShipping\"\r\n        },\r\n        {    \r\n            label: 'Not Free Shipping',\r\n            detail: \"Arrives in less than week\",\r\n            amount: '0.11',\r\n            identifier: \"ChargeShipping\"\r\n        }\r\n    ],\r\n    requiredShippingContactFields: [\r\n        'name',\r\n        'email',\r\n        'phone',\r\n        'postalAddress'\r\n    ],\r\n    requiredBillingContactFields: [\r\n        'name',\r\n        'email',\r\n        'phone'\r\n    ],\r\n    shippingContact: {\r\n        phoneNumber: '888-8888',\r\n        emailAddress: 'something@example.ne',\r\n        givenName: 'Bob',\r\n        familyName: 'Kahuna',\r\n        addressLines: ['123 Main St.', 'Suite 101'],\r\n        locality: 'Los Angeles',\r\n        administrativeArea: 'CA',\r\n        postalCode: '90010',\r\n        country: 'United States',\r\n        countryCode: 'US',\r\n    },\r\n    billingContact: {\r\n        emailAddress: 'something@example.ne',\r\n        givenName: 'Bob',\r\n        familyName: 'Kahuna',\r\n        addressLines: ['123 Main St.', 'Suite 101'],\r\n        subLocality: 'Los Angeles',\r\n        locality: 'CA',\r\n        postalCode: '90010',\r\n        country: 'United States',\r\n        countryCode: 'US',\r\n    }\r\n};\r\n\r\nconst ExampleApp = () => {\r\n    const [ prInterface, setPrInterface ] = useState(() => false);\r\n    const [ tecResult, setTecResult ] = useState(\"\");\r\n    const { createPayment, getCurrentElements } = useTeConnect();\r\n    const createTecPrInterface = useTecPaymentsRequest();\r\n\r\n    useEffect(() => {\r\n        if (createTecPrInterface) {\r\n            const tecPrInterface = createTecPrInterface({ applePay: hardCodedPaymentRequestObj, googlePay: extendedOptionsObject });\r\n            console.log(tecPrInterface);\r\n\r\n            tecPrInterface.canMakePayments().then( availablePrMethods => {\r\n                console.log('canMakePayments Result: ', availablePrMethods);\r\n\r\n                if (availablePrMethods)\r\n                    setPrInterface(tecPrInterface);\r\n                else\r\n                    setTecResult(\"Apple Pay not available\");\r\n            });\r\n\r\n            tecPrInterface.listenFor('confirm-token', async (tokenResp) => {\r\n                console.log('[CUSTOMER TEC COMPLETE EVENT]: ');\r\n                console.log(tokenResp);\r\n                const JsonResp = JSON.stringify(tokenResp.tokenDetails, null, '\\t');\r\n                console.log(JsonResp);\r\n\r\n                setTecResult(JsonResp);\r\n\r\n                if (tokenResp && tokenResp.tokenDetails && tokenResp.tokenDetails.type === 'applePay')\r\n                    tokenResp.completePayment('success');\r\n            });\r\n\r\n            tecPrInterface.listenFor('cancel-transaction', async (cancelEvent) => {\r\n                console.log('[CUSTOMER TEC CANCEL EVENT]: ');\r\n                console.log(cancelEvent);\r\n            });\r\n\r\n            tecPrInterface.listenFor('shipping-method-update', async (shippingMethodUpdateEvent) => {\r\n                console.log('[CUSTOMER TEC SHIPPING UPDATE EVENT]: ');\r\n                console.log(shippingMethodUpdateEvent);\r\n\r\n                const { shippingMethod, completeShippingMethodSelection } = shippingMethodUpdateEvent;\r\n\r\n                const notFreeUpdate = {\r\n                    newTotal: {\r\n                        label: \"Test Trx with Not Free Shipping\",\r\n                        amount: \"1.11\",\r\n                        type: \"final\"\r\n                    }\r\n                }\r\n\r\n                const freeUpdate = {\r\n                    newTotal: {\r\n                        label: \"Test Trx w/ Free Shipping\",\r\n                        amount: \"1.00\",\r\n                        type: \"final\"\r\n                    }\r\n                }\r\n\r\n                const outOfUsShipping = {\r\n                    newTotal: {\r\n                        label: \"Test Trx w/ Out of Scope Shipping\",\r\n                        amount: \"1.23\",\r\n                        type: \"final\"\r\n                    }\r\n                }\r\n\r\n                let shippingMethodUpdateObj;\r\n                switch (shippingMethod.identifier) {\r\n                    case \"OutOfCountryShip\":\r\n                        shippingMethodUpdateObj = outOfUsShipping;\r\n                        break;\r\n                    case 'ChargeShipping':\r\n                        shippingMethodUpdateObj = notFreeUpdate;\r\n                        break;\r\n                    default:\r\n                        shippingMethodUpdateObj = freeUpdate;\r\n\r\n                }\r\n\r\n                completeShippingMethodSelection(shippingMethodUpdateObj);\r\n            });\r\n\r\n            tecPrInterface.listenFor('payment-method-selection', async (paymentMethodEvent) => {\r\n                console.log('[CUSTOMER TEC PAYMENT METHOD EVENT]:');\r\n\r\n                const { paymentMethod, completePaymentMethodSelection } = paymentMethodEvent;\r\n\r\n                console.log('paymentMethod: ', paymentMethodEvent);\r\n\r\n                const hardCodedPaymentUpdateObj = {\r\n                    newTotal: {\r\n                        label: \"Test Trx with payment method\",\r\n                        amount: \"1.01\",\r\n                        type: \"final\"\r\n                    }\r\n                }\r\n\r\n                completePaymentMethodSelection(hardCodedPaymentUpdateObj);\r\n            });\r\n\r\n            tecPrInterface.listenFor('shipping-contact-update', async (shippingContactEvent) => {\r\n                console.log('[CUSTOMER SHIPPING CONTACT EVENT]:');\r\n                console.log('shippingContactEvent: ', shippingContactEvent);\r\n\r\n                const { shippingContact, completeShippingContactSelection } = shippingContactEvent;\r\n\r\n                const hardCodedShippingContactUpdateObj = {\r\n                    newTotal: {\r\n                        label: \"Test Trx positive shippingContact\",\r\n                        amount: \"1.02\",\r\n                        type: \"final\"\r\n                    },\r\n                    newShippingMethods: [\r\n                        {    \r\n                            label: 'Outside US Shipping',\r\n                            detail: \"Arrives in 7-12 weeks\",\r\n                            amount: '100.00',\r\n                            identifier: \"OutOfCountryShip\"\r\n                        },\r\n                        {    \r\n                            label: 'Not Free Shipping',\r\n                            detail: \"Arrives in less than week\",\r\n                            amount: '0.11',\r\n                            identifier: \"ChargeShipping\"\r\n                        }\r\n                    ]\r\n                }\r\n\r\n                const errObj = {\r\n                    newTotal: {\r\n                        label: \"Test Trx negative shippingContact\",\r\n                        amount: \"1.03\",\r\n                        type: \"final\"\r\n                    },\r\n                    errors: [\r\n                        {\r\n                            errorType: \"failure\",\r\n                            message: \"Generic Error Message for an unkown error\"\r\n                        }\r\n                    ]\r\n                }\r\n\r\n                console.log(`[${shippingContact.countryCode}]`);\r\n\r\n                completeShippingContactSelection(\r\n                    (shippingContact.countryCode === \"US\") ? hardCodedShippingContactUpdateObj : errObj\r\n                );\r\n            });\r\n        }\r\n    }, [createTecPrInterface, setTecResult]);\r\n\r\n    const clickHandler = async(e) => {\r\n        try {\r\n            const elements = getCurrentElements();\r\n            const teConnectResponse = await createPayment(elements);\r\n            console.log('result:', teConnectResponse);\r\n        }\r\n        catch(err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div style={{ height: '100%' }}>\r\n            <h1>TEC Demo</h1>\r\n            <CardEntry stylesConfig={ customStyles } />\r\n            { prInterface && <TecPaymentRequestButtons paymentRequestInterface={ prInterface } /> }\r\n            \r\n            <button onClick={ clickHandler }>Create Token</button>\r\n            \r\n            {tecResult && \r\n                <div style={{ \r\n                    height: '100%', \r\n                    padding: '3rem', \r\n                    margin: '3rem',\r\n                    minWidth: '70%', \r\n                    overflowWrap: 'break-word',\r\n                    whiteSpace: 'pre-wrap'\r\n                }}>\r\n                    <h3>Payment Request Results:</h3>\r\n                    {tecResult}\r\n                </div> \r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExampleApp;\r\n","import React from 'react';\nimport { TEConnect } from '@magensa/te-connect-react';\nimport { createTEConnect } from '@magensa/te-connect';\n\nimport ExampleApp from './components/exampleApp';\n\n\nconst teConnectInstance = createTEConnect(\"Y2xpZW50VG9rZW5Qb2NDb2RlL2NsaWVudFRva2VuUG9jVXNlcjpQYXNzd29yZDEh\", { tecPaymentRequest: {\n    appleMerchantId: \"AP00000001\",\n    googleMerchantId: 'BCR2DN4T4CU2XKIQ'\n} });\n\nconst App = () => (\n    <TEConnect teConnect={ teConnectInstance }>\n        <ExampleApp />\n    </TEConnect>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}